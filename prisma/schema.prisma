generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  username           String             @unique
  password           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  watchlistId        Int                @default(-1)
  lists              List[]
  likedLists         ListLike[]
  likedListComments  ListCommentLike[]
  likedMovies        MovieLike[]
  likedMovieComments MovieCommentLike[]
}

model List {
  id          Int           @id @default(autoincrement())
  isWatchlist Boolean       @default(false)
  userId      Int           @default(-1)
  title       String        @default("My New List")
  description String?       @default("")
  likesCount  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  movies      MovieOnList[]
  comments    ListComment[]
  likes       ListLike[]
}

model Movie {
  id                Int            @id @default(autoincrement())
  tmdbId            Int            @unique
  title             String
  release_date      String
  poster_path       String?
  backdrop_path     String?
  original_title    String
  overview          String
  tagline           String
  original_language String
  lists             MovieOnList[]
  likes             MovieLike[]
  comments          MovieComment[]
  MovieGenre        MovieGenre[]
}

model Genre {
  id         Int          @id @default(autoincrement())
  genreId    Int          @unique
  name       String       @unique
  MovieGenre MovieGenre[]
}

model MovieGenre {
  id      Int   @id @default(autoincrement())
  movieId Int
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  genre   Genre @relation(fields: [genreId], references: [id])
}

model MovieOnList {
  id                Int   @id @default(autoincrement())
  listId            Int
  movieId           Int
  positionOnTheList Int   @default(autoincrement())
  list              List  @relation(fields: [listId], references: [id], onDelete: Cascade)
  movie             Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([listId, movieId, positionOnTheList]) // ensures that the same movie canâ€™t be added to the same list more than once.
}

model ListComment {
  id        Int               @id @default(autoincrement())
  text      String
  listId    Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  list      List              @relation(fields: [listId], references: [id])
  likes     ListCommentLike[]
}

model MovieComment {
  id        Int                @id @default(autoincrement())
  text      String
  movieId   Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  movie     Movie              @relation(fields: [movieId], references: [id])
  likes     MovieCommentLike[]
}

model ListLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  listId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([userId, listId])
}

model ListCommentLike {
  id        Int         @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  comment   ListComment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

model MovieCommentLike {
  id        Int          @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  comment   MovieComment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

model MovieLike {
  userId    Int
  movieId   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@id([userId, movieId])
}
